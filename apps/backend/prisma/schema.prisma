// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("STACK_DATABASE_CONNECTION_STRING")
  directUrl = env("STACK_DIRECT_DATABASE_CONNECTION_STRING")
}

model Project {
  // Note that the project with ID `internal` is handled as a special case.
  id String @id

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  displayName      String
  description      String?                @default("")
  configId         String                 @db.Uuid
  config           ProjectConfig          @relation(fields: [configId], references: [id])
  configOverride   ProjectConfigOverride?
  isProductionMode Boolean

  users           ProjectUser[]    @relation("ProjectUsers")
  teams           Team[]
  apiKeySets      ApiKeySet[]
  authMethods     AuthMethod[]
  contactChannels ContactChannel[]
}

// Contains all the configuration for a project.
// 
// More specifically, "configuration" is what we call those settings that only depend on environment variables and overrides between different deployments.
model ProjectConfig {
  id String @id @default(uuid()) @db.Uuid

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  allowLocalhost    Boolean
  credentialEnabled Boolean
  magicLinkEnabled  Boolean

  createTeamOnSignUp Boolean

  projects             Project[]
  oauthProviderConfigs OAuthProviderConfig[]
  emailServiceConfig   EmailServiceConfig?
  domains              ProjectDomain[]
  permissions          Permission[]

  teamCreateDefaultSystemPermissions TeamSystemPermission[]
  teamMemberDefaultSystemPermissions TeamSystemPermission[]
  AuthMethodConfig                   AuthMethodConfig[]
  OptAuthMethodConfig                OptAuthMethodConfig[]
  ConnectedAccountConfig             ConnectedAccountConfig[]
}

model ProjectDomain {
  projectConfigId String @db.Uuid

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  domain      String
  handlerPath String

  projectConfig ProjectConfig @relation(fields: [projectConfigId], references: [id], onDelete: Cascade)

  @@unique([projectConfigId, domain])
}

// Environment-specific overrides for a configuration.
//
// This is a quick and dirty way to allow for environment-specific overrides of the configuration.
//
// For most cases, you should prefer to use environment variables.
//
// Note: Overrides (and environment variables) are currently unimplemented, so this model is empty.
model ProjectConfigOverride {
  projectId String @id

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  project Project @relation(fields: [projectId], references: [id])
}

model Team {
  projectId String
  teamId    String @default(uuid()) @db.Uuid

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  displayName     String
  profileImageUrl String?

  project     Project      @relation(fields: [projectId], references: [id], onDelete: Cascade)
  permissions Permission[]
  teamMembers TeamMember[]

  @@id([projectId, teamId])
}

// This is used for fields that are boolean but only the true value is part of a unique constraint.
// For example if you want to allow only one selected team per user, you can make an optional field with this type and add a unique constraint.
// Only the true value is considered for the unique constraint, the null value is not.
enum BooleanTrue {
  TRUE
}

model TeamMember {
  projectId     String
  projectUserId String @db.Uuid
  teamId        String @db.Uuid

  // This will override the displayName of the user in this team.
  displayName     String?
  // This will override the profileImageUrl of the user in this team.
  profileImageUrl String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  projectUser ProjectUser  @relation(fields: [projectId, projectUserId], references: [projectId, projectUserId], onDelete: Cascade)
  team        Team         @relation(fields: [projectId, teamId], references: [projectId, teamId], onDelete: Cascade)
  isSelected  BooleanTrue?

  directPermissions TeamMemberDirectPermission[]

  @@id([projectId, projectUserId, teamId])
  @@unique([projectId, projectUserId, isSelected])
}

model TeamMemberDirectPermission {
  id             String  @id @default(uuid()) @db.Uuid
  projectId      String
  projectUserId  String  @db.Uuid
  teamId         String  @db.Uuid
  permissionDbId String? @db.Uuid

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  teamMember TeamMember @relation(fields: [projectId, projectUserId, teamId], references: [projectId, projectUserId, teamId], onDelete: Cascade)

  // exactly one of [permissionId && permission] or [systemPermission] must be set
  permission       Permission?           @relation(fields: [permissionDbId], references: [dbId], onDelete: Cascade)
  systemPermission TeamSystemPermission?

  @@unique([projectId, projectUserId, teamId, permissionDbId])
  @@unique([projectId, projectUserId, teamId, systemPermission])
}

model Permission {
  // The ID of this permission, as is chosen by and exposed to the user. It is different from the database ID, which is randomly generated and only used internally.
  queryableId     String
  // The database ID of this permission. This is never exposed to any client and is only used to make sure the database has an ID column.
  dbId            String  @id @default(uuid()) @db.Uuid
  // exactly one of [projectConfigId && projectConfig] or [projectId && teamId && team] must be set
  projectConfigId String? @db.Uuid
  projectId       String?
  teamId          String? @db.Uuid

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  description String?

  // The scope of the permission. If projectConfigId is set, may be GLOBAL or TEAM; if teamId is set, must be TEAM.
  scope         PermissionScope
  projectConfig ProjectConfig?  @relation(fields: [projectConfigId], references: [id])
  team          Team?           @relation(fields: [projectId, teamId], references: [projectId, teamId], onDelete: Cascade)

  parentEdges                PermissionEdge[]             @relation("ChildPermission")
  childEdges                 PermissionEdge[]             @relation("ParentPermission")
  teamMemberDirectPermission TeamMemberDirectPermission[]

  isDefaultTeamCreatorPermission Boolean @default(false)
  isDefaultTeamMemberPermission  Boolean @default(false)

  @@unique([projectConfigId, queryableId])
  @@unique([projectId, teamId, queryableId])
}

enum PermissionScope {
  GLOBAL
  TEAM
}

enum TeamSystemPermission {
  UPDATE_TEAM
  DELETE_TEAM
  READ_MEMBERS
  REMOVE_MEMBERS
  INVITE_MEMBERS
}

model PermissionEdge {
  edgeId String @id @default(uuid()) @db.Uuid

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // exactly one of [parentPermissionDbId && parentPermission] or [parentTeamSystemPermission] must be set
  parentPermissionDbId       String?               @db.Uuid
  parentPermission           Permission?           @relation("ParentPermission", fields: [parentPermissionDbId], references: [dbId], onDelete: Cascade)
  parentTeamSystemPermission TeamSystemPermission?

  childPermissionDbId String     @db.Uuid
  childPermission     Permission @relation("ChildPermission", fields: [childPermissionDbId], references: [dbId], onDelete: Cascade)
}

model ProjectUser {
  projectId     String
  projectUserId String @default(uuid()) @db.Uuid

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  project                       Project                        @relation("ProjectUsers", fields: [projectId], references: [id], onDelete: Cascade)
  projectUserRefreshTokens      ProjectUserRefreshToken[]
  projectUserAuthorizationCodes ProjectUserAuthorizationCode[]
  projectUserOAuthAccounts      ProjectUserOAuthAccount[]
  teamMembers                   TeamMember[]

  // @deprecated
  projectUserEmailVerificationCode ProjectUserEmailVerificationCode[]
  // @deprecated
  projectUserPasswordResetCode     ProjectUserPasswordResetCode[]
  // @deprecated
  projectUserMagicLinkCode         ProjectUserMagicLinkCode[]

  primaryEmail         String?
  primaryEmailVerified Boolean
  profileImageUrl      String?
  displayName          String?
  passwordHash         String?
  authWithEmail        Boolean

  serverMetadata Json?
  clientMetadata Json?
  ContactChannel ContactChannel[]
  AuthMethod     AuthMethod[]

  @@id([projectId, projectUserId])
}

enum ContactChannelType {
  EMAIL
}

model ContactChannel {
  projectId     String
  id            String @default(uuid()) @db.Uuid
  projectUserId String @db.Uuid

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  project     Project     @relation(fields: [projectId], references: [id], onDelete: Cascade)
  projectUser ProjectUser @relation(fields: [projectId, projectUserId], references: [projectId, projectUserId], onDelete: Cascade)

  type      ContactChannelType
  isPrimary BooleanTrue?

  // email
  email         String
  optAuthMethod OptAuthMethod[]

  @@id([projectId, id])
  @@unique([projectId, isPrimary])
}

model ConnectedAccountConfig {
  projectConfigId String
  id              String @default(uuid()) @db.Uuid

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  enabled Boolean @default(true)

  // this should never be null
  oauthConfig OAuthProviderConfig?

  projectConfig                      ProjectConfig @relation(fields: [projectConfigId], references: [id], onDelete: Cascade)
  oAuthProviderConfigProjectConfigId String        @db.Uuid
  oAuthProviderConfigId              String

  @@id([projectConfigId, id])
}

model AuthMethodConfig {
  projectConfigId String
  id              String @default(uuid()) @db.Uuid

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  enabled Boolean @default(true)

  optConfig      OptAuthMethodConfig?
  oauthConfig    OAuthProviderConfig?
  passwordConfig PasswordAuthMethodConfig?

  projectConfig ProjectConfig @relation(fields: [projectConfigId], references: [id], onDelete: Cascade)

  @@id([projectConfigId, id])
}

model OptAuthMethodConfig {
  projectConfigId    String @db.Uuid
  authMethodConfigId String @db.Uuid

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  authMethodConfig AuthMethodConfig @relation(fields: [projectConfigId, authMethodConfigId], references: [projectConfigId, id], onDelete: Cascade)

  contactChannelType ContactChannelType
  ProjectConfig      ProjectConfig      @relation(fields: [projectConfigId], references: [id])

  @@id([projectConfigId, authMethodConfigId])
}

// Both the connected account and auth methods can use this configuration.
// Exactly one of the xyzOAuthConfig variables should be set.
model OAuthProviderConfig {
  projectConfigId          String  @db.Uuid
  authMethodConfigId       String? @db.Uuid
  connectedAccountConfigId String? @db.Uuid
  id                       String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  proxiedOAuthConfig  ProxiedOAuthProviderConfig?
  standardOAuthConfig StandardOAuthProviderConfig?

  projectConfig            ProjectConfig             @relation(fields: [projectConfigId], references: [id])
  projectUserOAuthAccounts ProjectUserOAuthAccount[]

  // At least one of authMethodConfig or connectedAccountConfig should be set.
  authMethodConfig       AuthMethodConfig?       @relation(fields: [projectConfigId, authMethodConfigId], references: [projectConfigId, id], onDelete: Cascade)
  connectedAccountConfig ConnectedAccountConfig? @relation(fields: [projectConfigId, connectedAccountConfigId], references: [projectConfigId, id], onDelete: Cascade)

  @@id([projectConfigId, id])
  @@unique([projectConfigId, authMethodConfigId])
  @@unique([projectConfigId, connectedAccountConfigId])
}

enum PasswordAuthMethodType {
  EMAIL
  // USERNAME
}

model PasswordAuthMethodConfig {
  projectConfigId    String @db.Uuid
  authMethodConfigId String @db.Uuid

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  authMethodConfig AuthMethodConfig @relation(fields: [projectConfigId, authMethodConfigId], references: [projectConfigId, id], onDelete: Cascade)

  type PasswordAuthMethodType

  @@id([projectConfigId, authMethodConfigId])
}

model ProxiedOAuthProviderConfig {
  projectConfigId String              @db.Uuid
  providerConfig  OAuthProviderConfig @relation(fields: [projectConfigId, id], references: [projectConfigId, id])
  id              String
  createdAt       DateTime            @default(now())
  updatedAt       DateTime            @updatedAt

  type ProxiedOAuthProviderType

  @@id([projectConfigId, id])
  @@unique([projectConfigId, type])
}

enum ProxiedOAuthProviderType {
  GITHUB
  FACEBOOK
  GOOGLE
  MICROSOFT
  SPOTIFY
}

model AuthMethod {
  projectId     String
  id            String @default(uuid()) @db.Uuid
  projectUserId String @db.Uuid

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  project     Project     @relation(fields: [projectId], references: [id], onDelete: Cascade)
  projectUser ProjectUser @relation(fields: [projectId, projectUserId], references: [projectId, projectUserId], onDelete: Cascade)

  optAuthMethods     OptAuthMethod[]
  passwordAuthMethod PasswordAuthMethod[]
  oauthAuthMethod    OAuthAuthMethod[]

  @@id([projectId, id])
}

model OptAuthMethod {
  projectId        String
  projectUserId    String @db.Uuid
  authMethodId     String @db.Uuid
  contactChannelId String @db.Uuid

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  contactChannel ContactChannel @relation(fields: [projectId, contactChannelId], references: [projectId, id])
  authMethod     AuthMethod     @relation(fields: [projectId, authMethodId], references: [projectId, id])

  @@id([projectId, authMethodId])
  @@unique([projectId, contactChannelId])
}

model PasswordAuthMethod {
  projectId        String
  projectUserId    String @db.Uuid
  authMethodId     String @db.Uuid
  contactChannelId String @db.Uuid

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  type       PasswordAuthMethodType
  identifier String
  authMethod AuthMethod             @relation(fields: [projectId, authMethodId], references: [projectId, id])

  @@id([projectId, authMethodId])
  @@unique([projectId, identifier])
}

// This connects to projectUserOauthAccount, which might be shared between auth method and connected account.
model OAuthAuthMethod {
  projectId        String
  projectUserId    String @db.Uuid
  authMethodId     String @db.Uuid
  contactChannelId String @db.Uuid

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  authMethod AuthMethod @relation(fields: [projectId, authMethodId], references: [projectId, id])
  // oauthAccount   ProjectUserOAuthAccount

  @@id([projectId, authMethodId])
}

// When ever a user goes through the OAuth flow and gets an account ID from the OAuth provider, we store that here.
model ProjectUserOAuthAccount {
  projectId             String
  projectUserId         String @db.Uuid
  projectConfigId       String @db.Uuid
  oauthProviderConfigId String
  providerAccountId     String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  providerConfig   OAuthProviderConfig @relation(fields: [projectConfigId, oauthProviderConfigId], references: [projectConfigId, id])
  // Before the OAuth account is connected to a use (for example, in the link oauth process), the projectUser is null.
  projectUser      ProjectUser?        @relation(fields: [projectId, projectUserId], references: [projectId, projectUserId], onDelete: Cascade)
  oauthTokens      OAuthToken[]
  oauthAccessToken OAuthAccessToken[]

  // This is used for the user to distinguish between multiple accounts from the same provider.
  email String?

  @@id([projectId, oauthProviderConfigId, providerAccountId])
}

model OAuthToken {
  id String @id @default(uuid()) @db.Uuid

  projectId             String
  oAuthProviderConfigId String
  providerAccountId     String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  projectUserOAuthAccount ProjectUserOAuthAccount @relation(fields: [projectId, oAuthProviderConfigId, providerAccountId], references: [projectId, oauthProviderConfigId, providerAccountId], onDelete: Cascade)

  refreshToken String
  scopes       String[]
}

model OAuthAccessToken {
  id String @id @default(uuid()) @db.Uuid

  projectId             String
  oAuthProviderConfigId String
  providerAccountId     String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  projectUserOAuthAccount ProjectUserOAuthAccount @relation(fields: [projectId, oAuthProviderConfigId, providerAccountId], references: [projectId, oauthProviderConfigId, providerAccountId], onDelete: Cascade)

  accessToken String
  scopes      String[]
  expiresAt   DateTime
}

model OAuthOuterInfo {
  id String @id @default(uuid()) @db.Uuid

  info       Json
  innerState String   @unique
  expiresAt  DateTime

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ProjectUserRefreshToken {
  projectId     String
  projectUserId String @db.Uuid

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  refreshToken String    @unique
  expiresAt    DateTime?

  projectUser ProjectUser @relation(fields: [projectId, projectUserId], references: [projectId, projectUserId], onDelete: Cascade)

  @@id([projectId, refreshToken])
}

model ProjectUserAuthorizationCode {
  projectId     String
  projectUserId String @db.Uuid

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  authorizationCode String   @unique
  redirectUri       String
  expiresAt         DateTime

  codeChallenge       String
  codeChallengeMethod String

  newUser                  Boolean
  afterCallbackRedirectUrl String?

  projectUser ProjectUser @relation(fields: [projectId, projectUserId], references: [projectId, projectUserId], onDelete: Cascade)

  @@id([projectId, authorizationCode])
}

model VerificationCode {
  projectId String
  id        String @default(uuid()) @db.Uuid

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  type        VerificationCodeType
  code        String
  expiresAt   DateTime
  usedAt      DateTime?
  redirectUrl String?

  email String

  data Json

  @@id([projectId, id])
  @@unique([projectId, code])
}

enum VerificationCodeType {
  ONE_TIME_PASSWORD
  PASSWORD_RESET
  CONTACT_CHANNEL_VERIFICATION
  TEAM_INVITATION
}

// @deprecated
model ProjectUserEmailVerificationCode {
  projectId     String
  projectUserId String @db.Uuid

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  code        String    @unique
  expiresAt   DateTime
  usedAt      DateTime?
  redirectUrl String

  projectUser ProjectUser @relation(fields: [projectId, projectUserId], references: [projectId, projectUserId], onDelete: Cascade)

  @@id([projectId, code])
}

// @deprecated
model ProjectUserPasswordResetCode {
  projectId     String
  projectUserId String @db.Uuid

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  code        String    @unique
  expiresAt   DateTime
  usedAt      DateTime?
  redirectUrl String

  projectUser ProjectUser @relation(fields: [projectId, projectUserId], references: [projectId, projectUserId], onDelete: Cascade)

  @@id([projectId, code])
}

// @deprecated
model ProjectUserMagicLinkCode {
  projectId     String
  projectUserId String @db.Uuid

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  code        String    @unique
  expiresAt   DateTime
  usedAt      DateTime?
  redirectUrl String
  newUser     Boolean

  projectUser ProjectUser @relation(fields: [projectId, projectUserId], references: [projectId, projectUserId], onDelete: Cascade)

  @@id([projectId, code])
}

//#region API keys

model ApiKeySet {
  projectId String
  project   Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  id        String   @default(uuid()) @db.Uuid
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  description          String
  expiresAt            DateTime
  manuallyRevokedAt    DateTime?
  publishableClientKey String?   @unique
  secretServerKey      String?   @unique
  superSecretAdminKey  String?   @unique

  @@id([projectId, id])
}

model EmailServiceConfig {
  projectConfigId String        @id @db.Uuid
  projectConfig   ProjectConfig @relation(fields: [projectConfigId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  proxiedEmailServiceConfig  ProxiedEmailServiceConfig?
  standardEmailServiceConfig StandardEmailServiceConfig?

  emailTemplates EmailTemplate[]
}

enum EmailTemplateType {
  EMAIL_VERIFICATION
  PASSWORD_RESET
  MAGIC_LINK
  TEAM_INVITATION
}

model EmailTemplate {
  projectConfigId    String             @db.Uuid
  emailServiceConfig EmailServiceConfig @relation(fields: [projectConfigId], references: [projectConfigId], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  content Json
  type    EmailTemplateType
  subject String

  @@id([projectConfigId, type])
}

model ProxiedEmailServiceConfig {
  projectConfigId    String             @id @db.Uuid
  emailServiceConfig EmailServiceConfig @relation(fields: [projectConfigId], references: [projectConfigId], onDelete: Cascade)
  createdAt          DateTime           @default(now())
  updatedAt          DateTime           @updatedAt
}

model StandardEmailServiceConfig {
  projectConfigId    String             @id @db.Uuid
  emailServiceConfig EmailServiceConfig @relation(fields: [projectConfigId], references: [projectConfigId], onDelete: Cascade)
  createdAt          DateTime           @default(now())
  updatedAt          DateTime           @updatedAt

  senderName  String
  senderEmail String
  host        String
  port        Int
  username    String
  password    String
}

//#endregion

//#region OAuth

model StandardOAuthProviderConfig {
  projectConfigId String              @db.Uuid
  providerConfig  OAuthProviderConfig @relation(fields: [projectConfigId, id], references: [projectConfigId, id])
  id              String
  createdAt       DateTime            @default(now())
  updatedAt       DateTime            @updatedAt

  type         StandardOAuthProviderType
  clientId     String
  clientSecret String

  // optional extra parameters for specific oauth providers
  // Facebook business integration requires a config_id
  facebookConfigId String?

  @@id([projectConfigId, id])
}

enum StandardOAuthProviderType {
  GITHUB
  FACEBOOK
  GOOGLE
  MICROSOFT
  SPOTIFY
}

//#endregion

//#region Events

model Event {
  id String @id @default(uuid()) @db.Uuid

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // if isWide == false, then eventEndedAt is always equal to eventStartedAt
  isWide         Boolean
  eventStartedAt DateTime
  eventEndedAt   DateTime

  // TODO: add event_type, and at least one of either system_event_type or event_type is always set
  systemEventTypeIds String[]
  data               Json
}

//#endregion
